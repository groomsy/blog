<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>GroomsyDev</title>
 <link href="http://groomsdev.org/atom.xml" rel="self"/>
 <link href="http://groomsdev.org/"/>
 <updated>2014-06-19T08:45:16-05:00</updated>
 <id>http://groomsdev.org</id>
 <author>
   <name>Todd Grooms</name>
   <email>todd.grooms@gmail.com</email>
 </author>

 
 <entry>
   <title>Unintuitive Swift</title>
   <link href="http://groomsdev.org/2014/06/18/unintuitive-swift/"/>
   <updated>2014-06-18T00:00:00-05:00</updated>
   <id>http://groomsdev.org/2014/06/18/unintuitive-swift</id>
   <content type="html">&lt;p&gt;In case you have been living under a rock, Apple announced a new language at this year&#39;s WWDC: Swift. I have been anxious to work with the new language beyond reading the Apple supplied &lt;a href=&quot;https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11&quot;&gt;The Swift Programming Language&lt;/a&gt; and the new Playground Xcode feature (which is a new way to experiment with Swift without using it in a project). I have recently been working on a new personal project (I am not ready to talk in great detail at this time, but it is a Mac application) and since the project is still in it&#39;s early stages, I decided to convert the project over and start using Swift in this project. Converting the project went smoothly and developers have the benefit of mixing and matching between Swift and Objective-C. I currently have a couple of classes written in Swift that play along nicely with the rest of my Objective-C code. I was skeptical when this capability was announced, but so far it has been working as Apple advertised.&lt;/p&gt;

&lt;p&gt;This morning, I was writing some Swift code to validate the input in an &lt;code&gt;NSTextField&lt;/code&gt; as it is typed by the user. I am attempting to validate the input as what I perceive to be a valid time format: &lt;code&gt;&quot;s&quot;&lt;/code&gt;, &lt;code&gt;&quot;ss&quot;&lt;/code&gt;, &lt;code&gt;&quot;m:ss&quot;&lt;/code&gt;, &lt;code&gt;&quot;mm:ss&quot;&lt;/code&gt;, &lt;code&gt;&quot;h:mm:ss&quot;&lt;/code&gt;, or &lt;code&gt;&quot;hh:mm:ss&quot;&lt;/code&gt;. In my initial implementation, I wanted to validate that only numbers and colons were input, to break apart the given string into components (with the token being the colon), and to assess each time component to ensure each component was an acceptable length. I am going to step through each one of these tasks and show what it would look like in Objective-C and what the equivalent looks like in Swift (or at least, to what it looks like in Swift to the best of my knowledge at this time; There may be more efficient ways of doing these tasks in Swift that I am not aware of yet). I&#39;m also going to rant a bit about some things that I found confusing in my Swift implementation.&lt;/p&gt;

&lt;h3&gt;Validating a String&#39;s CharacterSet&lt;/h3&gt;

&lt;p&gt;Given a string, I want to know whether or not the given string contains any forbidden characters. Given &lt;code&gt;&quot;07:07&quot;&lt;/code&gt;, the result would be &lt;code&gt;false&lt;/code&gt; (does not contain forbidden characters); Given &lt;code&gt;&quot;07.07&quot;&lt;/code&gt;, the result would be &lt;code&gt;true&lt;/code&gt; (does contain forbidden characters).&lt;/p&gt;

&lt;h4&gt;Objective-C&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSString *timeString = @&quot;07:07&quot;;

NSCharacterSet *validTimeCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;0123456789:&quot;];
NSCharacterSet *invalidTimeCharacterSet = [validTimeCharacterSet invertedSet];
NSRange rangeOfInvalidTimeCharacters = [timeString rangeOfCharacterFromSet:invalidTimeCharacterSet];
BOOL invalidTime = rangeOfInvalidTimeCharacters.location != NSNotFound;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Swift&lt;/h4&gt;

&lt;p&gt;So there are a few caveats with this solution in Swift. Swift has a &lt;code&gt;Range&lt;/code&gt; class that does not directly map to the &lt;code&gt;NSRange&lt;/code&gt; structure. I, for the life of me, could not figure out how &lt;code&gt;Range&lt;/code&gt; actually works. Furthermore, Swift&#39;s String class does not have a simple &lt;code&gt;rangeOfCharacterFromSet:&lt;/code&gt; function (or it&#39;s equivalent); Instead, it has a &lt;code&gt;rangeOfCharacterFromSet(aSet: NSCharacterSet, options: NSStringCompareOptions, range: Range)&lt;/code&gt; function. I tried many things, but could not get &lt;code&gt;Range&lt;/code&gt; to behave as I thought it would. I realize this has to do with how I think of &lt;code&gt;NSRange&lt;/code&gt; and I am trying to just use &lt;code&gt;NSRange&lt;/code&gt; in Swift, but I found it very confusing. After hunting through the developer forums, this is the solution I came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let timeString = &quot;07:07&quot; as NSString

let validTimeCharacterSet = NSCharacterSet(charactersInString: &quot;0123456789:&quot;)
let invalidTimeCharacterSet = validTimeCharacterSet.invertedSet
let rangeOfInvalidCharacters = timeString.rangeOfCharacterFromSet(invalidTimeCharacterSet)
let invalidTime = rangeOfInvalidCharacters.location != NSNotFound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let timeString = &quot;07:07&quot;

let validTimeCharacterSet = NSCharacterSet(charactersInString: &quot;0123456789:&quot;)
let invalidTimeCharacterSet = validTimeCharacterSet.invertedSet
let rangeOfInvalidCharacters = timeString.bridgeToObjectiveC().rangeOfCharacterFromSet(invalidTimeCharacterSet)
let invalidTime = rangeOfInvalidCharacters.location != NSNotFound
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Breaking a String into Components&lt;/h3&gt;

&lt;p&gt;Given a delimited string, I want an array of strings for each component. Given &lt;code&gt;&quot;mm:ss&quot;&lt;/code&gt;, the result would be &lt;code&gt;[&quot;mm&quot;, &quot;ss&quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Objective-C&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;NSString *timeString = @&quot;07:07&quot;;
NSArray *timeComponents = [timeString componentsSeparatedByString:@&quot;:&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Swift&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;let timeString = &quot;07:07&quot;
let timeComponents = timeString.componentsSeparatedByString(&quot;:&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Iterating Over an Array Backwards&lt;/h3&gt;

&lt;p&gt;I will not bore you with the details on how to iterate over an array backwards in Objective-C. That really is not important in this observation. The real quirk is how you iterate over an array backwards in Swift. In Swift, you can iterate with a &lt;code&gt;for-in&lt;/code&gt; loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for index in 0...3 {
  println(index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code will loop four times (the &lt;code&gt;...&lt;/code&gt; in this case indicates inclusive, meaning &lt;code&gt;&amp;lt;= 3&lt;/code&gt;; If you wanted to be exclusive, meaning &lt;code&gt;&amp;lt; 3&lt;/code&gt;, use &lt;code&gt;..&lt;/code&gt; instead). Using my prior knowledge of Ruby, which has a similar &lt;code&gt;for&lt;/code&gt; loop structure, I assumed that performing this loop in a reverse order would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for index in 3...0 {
  println(index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After watching the loop run for a few seconds, I realized how my assumption was false. My code was iterating many, many times. Have you seen the issue yet? Well, Swift is iterating from 3 to 0, incrementing. The loop starts at 3, then moves to 4, then to 5, 6, 7, and so on. Given enough time, &lt;code&gt;index&lt;/code&gt; (which is an &lt;code&gt;Int64&lt;/code&gt; on my 64-bit Mac) will overflow into negative numbers, then slowly work it&#39;s way to zero. I found this to be fascinating. I am not going to say this is a defect, but I will say that I believe this is misleading behavior, given prior experience with other languages. I would have expected the above code to start at 3 and work it&#39;s way down to 0.&lt;/p&gt;

&lt;p&gt;I could have used my time here to complain about this, but I will not. This has been talked about on the developer forums, so I will not add to it here. After some digging, I did find a way of accomplishing this task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for index in reverse(0...3) {
  println(index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, of course: The intuitive &lt;code&gt;reverse()&lt;/code&gt; function. How could I have missed that?&lt;/p&gt;

&lt;h3&gt;What I Learned&lt;/h3&gt;

&lt;p&gt;I have much to learn when it comes to Swift. It does not help that the language will be evolving while learning, but it makes sense to learn it early (in my opinion) so that I understand what my platform is moving toward. I am coming up on nearly five years of iOS experience and the code I am writing in Swift now makes me cringe. It makes me feel like I am in college again, writing terrible code. Have you ever looked back at code you have wrote while in college? Welcome to learning Swift.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing CoreDataMate</title>
   <link href="http://groomsdev.org/2014/04/09/introducing-core-data-mate/"/>
   <updated>2014-04-09T00:00:00-05:00</updated>
   <id>http://groomsdev.org/2014/04/09/introducing-core-data-mate</id>
   <content type="html">&lt;p&gt;A few years ago, I started development on a project that required long term persistence. Up until that point, most all of my persistence was handled on the server. This project required that I persist data locally on the user&#39;s device, in conjunction with persisting data remotely on a server. As this was an iOS project and Apple is &quot;all-in&quot; with Core Data, I decided I had better get &quot;all-in&quot; with Core Data as well.&lt;/p&gt;

&lt;p&gt;I read through every Core Data tutorial I could find on the internet. Regardless of how many times I tried, I just could not grasp what was happening in Core Data. After complaining about this to some of my coworkers, I had a few of them recommend &lt;a href=&quot;https://github.com/magicalpanda/MagicalRecord&quot;&gt;MagicalRecord&lt;/a&gt;. I am not going to question the quality of this library; I have no doubt that it is well written and works as advertised. The issue is that I don&#39;t understand what the library is doing behind the curtain. I use libraries all the time, but when I use them, I want to understand what they are doing (more or less) without blindly trusting them. For whatever reason, I simply cannot wrap my head around what MagicalRecord is doing. It seems as though you can arbitrarily create objects on any context and save them. This is one of the library&#39;s goals. However, one thing I have come to understand is that you need to ensure that every thread has it&#39;s very own context so that you don&#39;t &quot;cross the streams&quot; so to speak. Try as I might, I simply could not ensure this using MagicalRecord. This is when I decided to go old school and purchase a book: &lt;a href=&quot;http://pragprog.com/book/mzcd2/core-data&quot;&gt;Core Data (2nd Edition): Data Storage and Management for iOS, OS X, and iCloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dont_cross_the_streams.jpg&quot; alt=&quot;Don&#39;t cross the streams&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After reading through &lt;em&gt;Core Data (2nd Edition)&lt;/em&gt;, I started writing what I called a &quot;data manager&quot;. The data manager is a simple class that acts as a gateway to your persistent store. The data manager houses a private context which is considered to be the master copy. You do not have direct access to this context from any public facing methods in the data manager. The context that you work with predominantly will be a child context of the private context. This child context is a main queue context that I have appropriately named &lt;code&gt;mainContext&lt;/code&gt;. The main queue context will be the context that you predominantly work with. This is the context with which your UI will directly interact.&lt;/p&gt;

&lt;p&gt;This is all great, except for the very real use case when you will need to write content to your persistent store. What then? Well, the data manager&#39;s current pattern dictates that you create a new temporary context for your thread (this can even be the main thread if you like, the point is that you just want a temporary context with which to work) whose parent will be the data manager&#39;s &lt;code&gt;mainContext&lt;/code&gt;; you will then make any changes that are necessary on this temporary context. After you are finished, you&#39;ll persist your temporary context which will write those changes upstream to the data manager&#39;s &lt;code&gt;mainContext&lt;/code&gt;. If that persist is successful, simply call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[CDMDataManager sharedManager] persist:YES];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which will write the &lt;code&gt;mainContext&lt;/code&gt;&#39;s changes upstream to the data manager&#39;s private context (the BOOL value indicates that it should be a synchronous save; a NO here would result in an asynchronous save). At that point, your new content is in your persistent store and you have the added benefit of your UI already being updated with this content as your changes already exist on the &lt;code&gt;mainContext&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a rudimentary example, but I wanted to show how easy Core Data can be to work with, with a bit of caution and understanding. Ready to check out the source code or give it a spin yourself? Head on over to &lt;a href=&quot;https://github.com/groomsy/coredatamate&quot;&gt;CoreDataMate on Github&lt;/a&gt; to check out the source. If you&#39;re impatient and want to play with the code (and you use &lt;a href=&quot;http://cocoapods.org&quot;&gt;Cocoapods&lt;/a&gt;) just add this to your Podfile: &lt;code&gt;pod &quot;CoreDataMate&quot;&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello, world!</title>
   <link href="http://groomsdev.org/2014/03/28/hello-world/"/>
   <updated>2014-03-28T00:00:00-05:00</updated>
   <id>http://groomsdev.org/2014/03/28/hello-world</id>
   <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;http://groomsydev.org&quot;&gt;GroomsyDev&lt;/a&gt;. This is the development related companion site to &lt;a href=&quot;http://toddgrooms.com&quot;&gt;toddgrooms.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to peruse my &lt;a href=&quot;https://github.com/groomsy&quot;&gt;Github projects&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
